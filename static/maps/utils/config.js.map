{"version":3,"sources":["utils/config.js"],"names":["_","Backbone","ConfigSetting","Model","extend","initialize","options","key","this","get","set","defaults","find","label","type","default_value","mode","hidden","s","undefined","_util2","default","get_random_color","set_value","value","parseFloat","parseInt","ConfigSettingCollection","Collection","model","to_key_value_dict","rval","each","setting","get_value","set_default_value","from_models_and_saved_values","models","saved_values","map","m","View","className","render","container","$el","collection","param","index","row","$","appendTo","append","attr","id","click","select","option","val","container_div","tip","e","top","removeClass","siblings","addClass","left","position","width","document","bind","height","stopPropagation","hide","unbind","callback","color","tooltip","tip_inner","farb_obj","farbtastic","help","input","css","fixed_farb_obj","new_color_icon","render_in_modal","setColor","self","cancel_fn","Galaxy","update_from_form","text","title","modal","window","children","body","buttons","keyCode","which","ok_fn","Cancel","OK","is","ConfigSettingCollectionView"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport util_mod from \"viz/trackster/util\";\n\n/* global $ */\n/* global Galaxy */\n\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get(\"key\");\n        this.set(\"id\", key);\n\n        // Set defaults based on key.\n        var defaults = _.find(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"color\",\n                    label: \"Color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 32,\n                    hidden: true\n                },\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                }\n            ],\n            s => s.key === key\n        );\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (this.get(\"value\") === undefined && this.get(\"default_value\") !== undefined) {\n            // Use default to set value (if present).\n            this.set_value(this.get(\"default_value\"));\n\n            // If no default value for color config, set random color.\n            if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                // For color setting, set random color.\n                this.set(\"value\", util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get(\"type\");\n\n        if (type === \"float\") {\n            value = parseFloat(value);\n        } else if (type === \"int\") {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({ value: value }, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend(\n    {\n        model: ConfigSetting,\n\n        /**\n         * Save settings as a dictionary of key-value pairs.\n         * This function is needed for backwards compatibility.\n         */\n        to_key_value_dict: function() {\n            var rval = {};\n            this.each(setting => {\n                rval[setting.get(\"key\")] = setting.get(\"value\");\n            });\n\n            return rval;\n        },\n\n        /**\n         * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n         */\n        get_value: function(key) {\n            var s = this.get(key);\n            if (s) {\n                return s.get(\"value\");\n            }\n\n            return undefined;\n        },\n\n        /**\n         * Set value for a setting.\n         */\n        set_value: function(key, value, options) {\n            var s = this.get(key);\n            if (s) {\n                return s.set_value(value, options);\n            }\n\n            return undefined;\n        },\n\n        /**\n         * Set default value for a setting.\n         */\n        set_default_value: function(key, default_value) {\n            var s = this.get(key);\n            if (s) {\n                return s.set(\"default_value\", default_value);\n            }\n\n            return undefined;\n        }\n    },\n    {\n        /**\n         * Utility function that creates a ConfigSettingsCollection from a set of models\n         * and a saved_values dictionary.\n         */\n        from_models_and_saved_values: function(models, saved_values) {\n            // If there are saved values, copy models and update with saved values.\n            if (saved_values) {\n                models = _.map(models, m => _.extend({}, m, { value: saved_values[m.key] }));\n            }\n\n            return new ConfigSettingCollection(models);\n        }\n    }\n);\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: \"config-settings-view\",\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each((param, index) => {\n            // Hidden params have no representation in the form\n            if (param.get(\"hidden\")) {\n                return;\n            }\n\n            // Build row for param.\n            var id = `param_${index}`;\n\n            var type = param.get(\"type\");\n            var value = param.get(\"value\");\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append(\n                $(\"<label />\")\n                    .attr(\"for\", id)\n                    .text(`${param.get(\"label\")}:`)\n            );\n            // Draw parameter as checkbox\n            if (type === \"bool\") {\n                row.append(\n                    $('<input type=\"checkbox\" />')\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .attr(\"checked\", value)\n                );\n            } else if (type === \"text\") {\n                // Draw parameter as textbox\n                row.append(\n                    $('<input type=\"text\"/>')\n                        .attr(\"id\", id)\n                        .val(value)\n                        .click(function() {\n                            $(this).select();\n                        })\n                );\n            } else if (type === \"select\") {\n                // Draw parameter as select area\n                var select = $(\"<select />\").attr(\"id\", id);\n                _.each(param.get(\"options\"), option => {\n                    $(\"<option/>\")\n                        .text(option.label)\n                        .attr(\"value\", option.value)\n                        .appendTo(select);\n                });\n                select.val(value);\n                row.append(select);\n            } else if (type === \"color\") {\n                // Draw parameter as color picker\n                var container_div = $(\"<div/>\").appendTo(row);\n\n                var input = $(\"<input />\")\n                    .attr(\"id\", id)\n                    .attr(\"name\", id)\n                    .val(value)\n                    .css(\"float\", \"left\")\n                    .appendTo(container_div)\n                    .click(function(e) {\n                        // Hide other pickers.\n                        $(\".tooltip\").removeClass(\"in\");\n\n                        // Show input's color picker.\n                        var tip = $(this)\n                            .siblings(\".tooltip\")\n                            .addClass(\"in\");\n                        tip\n                            .css({\n                                // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                // top: $(this).position().top + $(this.height)\n                                left: $(this).position().left + $(this).width() + 5,\n                                top: $(this).position().top - $(tip).height() / 2 + $(this).height() / 2\n                            })\n                            .show();\n\n                        // Click management:\n\n                        // Keep showing tip if clicking in tip.\n                        tip.click(e => {\n                            e.stopPropagation();\n                        });\n\n                        // Hide tip if clicking outside of tip.\n                        $(document).bind(\"click.color-picker\", () => {\n                            tip.hide();\n                            $(document).unbind(\"click.color-picker\");\n                        });\n\n                        // No propagation to avoid triggering document click (and tip hiding) above.\n                        e.stopPropagation();\n                    });\n                // Icon for setting a new random color; behavior set below.\n                var new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                    .addClass(\"icon-button arrow-circle\")\n                    .appendTo(container_div)\n                    .attr(\"title\", \"Set new random color\")\n                    .tooltip();\n\n                // Color picker in tool tip style.\n                var tip = $(\"<div class='tooltip right' style='position: absolute;' />\")\n                    .appendTo(container_div)\n                    .hide();\n\n                // Inner div for padding purposes\n                var tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip);\n\n                $(\"<div class='tooltip-arrow'></div>\").appendTo(tip);\n\n                var farb_obj = $.farbtastic(tip_inner, {\n                    width: 100,\n                    height: 100,\n                    callback: input,\n                    color: value\n                });\n\n                // Clear floating.\n                container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (fixed_farb_obj => {\n                    new_color_icon.click(() => {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n            } else {\n                row.append(\n                    $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                );\n            }\n            // Help text\n            if (param.help) {\n                row.append($(\"<div class='help'/>\").text(param.help));\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this;\n\n        var cancel_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n        };\n\n        var ok_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n            self.update_from_form();\n        };\n\n        var check_enter_esc = e => {\n            if ((e.keyCode || e.which) === 27) {\n                // Escape key\n                cancel_fn();\n            } else if ((e.keyCode || e.which) === 13) {\n                // Enter key\n                ok_fn();\n            }\n        };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                Cancel: cancel_fn,\n                OK: ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each((setting, index) => {\n            if (!setting.get(\"hidden\")) {\n                // Set value from view.\n                var id = `param_${index}`;\n                var value = self.$el.find(`#${id}`).val();\n                if (setting.get(\"type\") === \"bool\") {\n                    value = self.$el.find(`#${id}`).is(\":checked\");\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n});\n\nexport default {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n"]}