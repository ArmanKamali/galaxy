{"version":3,"sources":["viz/trackster.js"],"names":["_","Backbone","TracksterUI","options","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","Model","baseURL","_utils2","default","cssLoadFile","_this2","Galaxy","modal","show","title","body","bookmarks","$","each","push","position","children","text","annotation","overview_track_name","view","overview_drawable","config","get_value","viz_config","to_dict","viewport","chrom","start","low","end","high","overview","ajax","url","root","type","dataType","data","id","vis_id","dbkey","vis_json","JSON","stringify","success","vis_info","hide","has_changes","window","history","pushState","location","hash","error","_localization2","buttons","Cancel","_this3","menu","_iconButton2","create_icon_buttons_menu","icon_class","on_click","_visualization2","select_datasets","new_tracks","track","add_drawable","_tracks2","object_from_template","DrawableGroup","force_right_panel","css","buttonMenu","editable","new_bookmark","appendTo","bookmarks_container","position_div","addClass","name","click","_this4","go_to","slideUp","remove","delete_icon_container","annotation_div","tooltip_config","num_rows","use_textarea","help_text","view_config","viewport_config","drawables_config","bookmarks_config","_this5","TracksterView","extend","header","editor","when","load_chroms_deferred","then","chrom_info","overview_drawable_name","undefined","change_chrom","i","length","drawables","set_overview","bookmark","set_up_router","TrackBrowserRouter","document","keyup","e","srcElement","is","which","viewport_container","scrollTop","move_fraction","_this6","Leave without Saving","off","Save","TracksterUIView","View","_this8","ui","append","$el","resize_window","galaxy_config","app","view_existing","get","choose_existing_or_new","view_new","_this9","_queryStringParsing2","listTracksParams","dataset_params","dataset_id","hda_ldda","gene_region","view_in_saved","View in new visualization","_this10","tracks_grid","url_base","embedded","Add to visualization","parent","val","param","create_visualization","tracks","init_editor","_this11","template_view_new","response","Create","create_browser","dbkeys_in_genomes","map","r","default_dbkey","contains","container","select2","html","_this12","add_dataset","data_type","track_data","init_keyboard_nav","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\nimport _l from \"utils/localization\";\nimport * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport tracks from \"viz/trackster/tracks\";\nimport visualization from \"viz/visualization\";\nimport IconButton from \"mvc/ui/icon-button\";\nimport query_string from \"utils/query-string-parsing\";\nimport GridView from \"mvc/grid/grid-view\";\nimport Utils from \"utils/utils\";\nimport \"libs/jquery/jquery.event.drag\";\nimport \"libs/jquery/jquery.event.hover\";\nimport \"libs/jquery/jquery.mousewheel\";\nimport \"libs/jquery/jquery-ui\";\nimport \"libs/jquery/select2\";\nimport \"libs/farbtastic\";\nimport \"libs/jquery/jquery.form\";\nimport \"libs/jquery/jquery.rating\";\nimport \"ui/editable-text\";\n\n/* global Galaxy */\n/* global $ */\n\n/**\n * User interface controls for trackster\n */\nclass TracksterUI extends Backbone.Model {\n    constructor(options) {\n        super(options);\n    }\n\n    initialize(baseURL) {\n        this.baseURL = baseURL;\n        Utils.cssLoadFile(\"static/style/jquery.rating.css\");\n        Utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n        Utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n        Utils.cssLoadFile(\"static/style/library.css\");\n        Utils.cssLoadFile(\"static/style/trackster.css\");\n    }\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz() {\n        // show dialog\n        Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(() => {\n            bookmarks.push({\n                position: $(this)\n                    .children(\".position\")\n                    .text(),\n                annotation: $(this)\n                    .children(\".annotation\")\n                    .text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = this.view.overview_drawable\n            ? this.view.overview_drawable.config.get_value(\"name\")\n            : null;\n\n        var viz_config = {\n            view: this.view.to_dict(),\n            viewport: {\n                chrom: this.view.chrom,\n                start: this.view.low,\n                end: this.view.high,\n                overview: overview_track_name\n            },\n            bookmarks: bookmarks\n        };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: `${Galaxy.root}visualization/save`,\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                id: this.view.vis_id,\n                title: this.view.config.get_value(\"name\"),\n                dbkey: this.view.dbkey,\n                type: \"trackster\",\n                vis_json: JSON.stringify(viz_config)\n            }\n        })\n            .success(vis_info => {\n                Galaxy.modal.hide();\n                this.view.vis_id = vis_info.vis_id;\n                this.view.has_changes = false;\n\n                // Needed to set URL when first saving a visualization.\n                window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n            })\n            .error(() => {\n                // show dialog\n                Galaxy.modal.show({\n                    title: _l(\"Could Not Save\"),\n                    body: \"Could not save visualization. Please try again later.\",\n                    buttons: {\n                        Cancel: () => {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            });\n    }\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu() {\n        var menu = IconButton.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: _l(\"Add tracks\"),\n                    on_click: () => {\n                        visualization.select_datasets({ dbkey: this.view.dbkey }, new_tracks => {\n                            _.each(new_tracks, track => {\n                                this.view.add_drawable(tracks.object_from_template(track, this.view, this.view));\n                            });\n                        });\n                    }\n                },\n                {\n                    icon_class: \"block--plus\",\n                    title: _l(\"Add group\"),\n                    on_click: () => {\n                        this.view.add_drawable(\n                            new tracks.DrawableGroup(this.view, this.view, {\n                                name: \"New Group\"\n                            })\n                        );\n                    }\n                },\n                {\n                    icon_class: \"bookmarks\",\n                    title: _l(\"Bookmarks\"),\n                    on_click: () => {\n                        // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                        window.force_right_panel($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\");\n                    }\n                },\n                {\n                    icon_class: \"globe\",\n                    title: _l(\"Circster\"),\n                    on_click: () => {\n                        window.location = `${this.baseURL}visualization/circster?id=${this.view.vis_id}`;\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: _l(\"Save\"),\n                    on_click: () => {\n                        this.save_viz();\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: _l(\"Close\"),\n                    on_click: () => {\n                        this.handle_unsaved_changes(this.view);\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        this.buttonMenu = menu;\n        return menu;\n    }\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\");\n\n        var new_bookmark = $(\"<div/>\")\n            .addClass(\"bookmark\")\n            .appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\")\n            .addClass(\"position\")\n            .appendTo(new_bookmark);\n\n        //position_link\n        $(\"<a href=''/>\")\n            .text(position)\n            .appendTo(position_div)\n            .click(() => {\n                this.view.go_to(position);\n                return false;\n            });\n\n        var annotation_div = $(\"<div/>\")\n            .text(annotation)\n            .appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\")\n                .addClass(\"delete-icon-container\")\n                .prependTo(new_bookmark)\n                .click(() => {\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    this.view.has_changes = true;\n                    return false;\n                });\n\n            // delete_icon\n            $(\"<a href=''/>\")\n                .addClass(\"icon-button delete\")\n                .appendTo(delete_icon_container);\n\n            annotation_div\n                .make_text_editable({\n                    num_rows: 3,\n                    use_textarea: true,\n                    help_text: \"Edit bookmark note\"\n                })\n                .addClass(\"annotation\");\n        }\n\n        this.view.has_changes = true;\n        return new_bookmark;\n    }\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n        // Create view.\n        this.view = new tracks.TracksterView(_.extend(view_config, { header: false }));\n        this.view.editor = true;\n\n        $.when(this.view.load_chroms_deferred).then(chrom_info => {\n            var overview_drawable_name = null;\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom;\n                var start = viewport_config.start;\n                var end = viewport_config.end;\n                overview_drawable_name = viewport_config.overview;\n\n                if (chrom && start !== undefined && end) {\n                    this.view.change_chrom(chrom, start, end);\n                } else {\n                    // No valid viewport, so use first chromosome.\n                    this.view.change_chrom(chrom_info[0].chrom);\n                }\n            } else {\n                // No viewport, so use first chromosome.\n                this.view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                for (let i = 0; i < drawables_config.length; i++) {\n                    this.view.add_drawable(tracks.object_from_template(drawables_config[i], this.view, this.view));\n                }\n            }\n\n            // Set overview.\n            for (let i = 0; i < this.view.drawables.length; i++) {\n                if (this.view.drawables[i].config.get_value(\"name\") === overview_drawable_name) {\n                    this.view.set_overview(this.view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (let i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    this.add_bookmark(bookmark.position, bookmark.annotation, editable);\n                }\n            }\n\n            // View has no changes as of yet.\n            this.view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({ view: this.view });\n\n        // TODO: This is hopefully not necessary anymore, since we're using the instance view.  Do it for compatibility for now.\n        return this.view;\n    }\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router(options) {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    }\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(e => {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(\":input\")) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch (e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    // var change = Math.round(view.viewport_container.height() / 15.0);\n                    view.viewport_container.scrollTop(view.viewport_container.scrollTop() - 20);\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    // var change = Math.round(view.viewport_container.height() / 15.0);\n                    view.viewport_container.scrollTop(view.viewport_container.scrollTop() + 20);\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes(view) {\n        if (view.has_changes) {\n            Galaxy.modal.show({\n                title: _l(\"Close visualization\"),\n                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    Cancel: () => {\n                        Galaxy.modal.hide();\n                    },\n                    \"Leave without Saving\": () => {\n                        $(window).off(\"beforeunload\");\n                        window.location = `${Galaxy.root}visualization`;\n                    },\n                    Save: () => {\n                        $.when(this.save_viz()).then(() => {\n                            window.location = `${Galaxy.root}visualization`;\n                        });\n                    }\n                }\n            });\n        } else {\n            window.location = `${Galaxy.root}visualization`;\n        }\n    }\n}\n\nclass TracksterUIView extends Backbone.View {\n    constructor(options) {\n        super(options);\n    }\n    // initalize trackster\n    initialize() {\n        // load ui\n        this.ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        this.ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        this.ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(this.ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\n            \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n        );\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(() => {\n            this.ui.view.resize_window();\n        });\n\n        // hide right panel\n        window.force_right_panel(\"hide\");\n\n        // check if id is available\n        if (window.galaxy_config.app.id) {\n            this.view_existing();\n        } else if (query_string.get(\"dataset_id\")) {\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    }\n\n    choose_existing_or_new() {\n        var dbkey = query_string.get(\"dbkey\");\n        var listTracksParams = {};\n\n        var dataset_params = {\n            dbkey: dbkey,\n            dataset_id: query_string.get(\"dataset_id\"),\n            hda_ldda: query_string.get(\"hda_ldda\"),\n            gene_region: query_string.get(\"gene_region\")\n        };\n\n        if (dbkey) {\n            listTracksParams[\"f-dbkey\"] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title: \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body: `<p><ul style='list-style: disc inside none'>You can add this dataset as:<li>a new track to one of your existing, saved Trackster sessions if they share the genome build: <b>${dbkey ||\n                \"Not available.\"}</b></li><li>or create a new session with this dataset as the only track</li></ul></p>`,\n            buttons: {\n                Cancel: () => {\n                    window.location = `${Galaxy.root}visualizations/list`;\n                },\n                \"View in saved visualization\": () => {\n                    this.view_in_saved(dataset_params);\n                },\n                \"View in new visualization\": () => {\n                    this.view_new();\n                }\n            }\n        });\n    }\n\n    // view\n    view_in_saved(dataset_params) {\n        var tracks_grid = new GridView({\n            url_base: `${Galaxy.root}visualization/list_tracks`,\n            embedded: true\n        });\n        Galaxy.modal.show({\n            title: _l(\"Add Data to Saved Visualization\"),\n            body: tracks_grid.$el,\n            buttons: {\n                Cancel: () => {\n                    window.location = `${Galaxy.root}visualizations/list`;\n                },\n                \"Add to visualization\": () => {\n                    $(window.parent.document)\n                        .find(\"input[name=id]:checked\")\n                        .each(() => {\n                            dataset_params.id = $(this).val();\n                            window.location = `${Galaxy.root}visualization/trackster?${$.param(dataset_params)}`;\n                        });\n                }\n            }\n        });\n    }\n\n    // view\n    view_existing() {\n        // get config\n        var viz_config = window.galaxy_config.app.viz_config;\n\n        // view\n        this.ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: viz_config.title,\n                vis_id: viz_config.vis_id,\n                dbkey: viz_config.dbkey\n            },\n            viz_config.viewport,\n            viz_config.tracks,\n            viz_config.bookmarks,\n            true\n        );\n\n        // initialize editor\n        this.init_editor();\n    }\n\n    // view\n    view_new() {\n        // ajax\n        $.ajax({\n            url: `${Galaxy.root}api/genomes?chrom_info=True`,\n            data: {},\n            error: () => {\n                alert(\"Couldn't create new browser.\");\n            },\n            success: response => {\n                // show dialog\n                Galaxy.modal.show({\n                    title: _l(\"New Visualization\"),\n                    body: this.template_view_new(response),\n                    buttons: {\n                        Cancel: () => {\n                            window.location = `${Galaxy.root}visualizations/list`;\n                        },\n                        Create: () => {\n                            this.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val());\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map(r => r[1]);\n                if (\n                    window.galaxy_config.app.default_dbkey &&\n                    _.contains(dbkeys_in_genomes, window.galaxy_config.app.default_dbkey)\n                ) {\n                    $(\"#new-dbkey\").val(window.galaxy_config.app.default_dbkey);\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    }\n\n    // new browser form\n    template_view_new(response) {\n        // start template\n        var html =\n            '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-title\">Browser name:</label>' +\n            '<div class=\"form-row-input\">' +\n            '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n            '<div class=\"form-row-input\">' +\n            '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (let i = 0; i < response.length; i++) {\n            html += `<option value=\"${response[i][1]}\">${response[i][0]}</option>`;\n        }\n\n        // close selection/finalize template\n        html += `</select></div><div style=\"clear: both;\"></div></div><div class=\"form-row\">Is the build not listed here? <a href=\"${\n            Galaxy.root\n        }custom_builds\">Add a Custom Build</a></div></form>`;\n\n        // return\n        return html;\n    }\n\n    // initialization for editor-specific functions.\n    init_editor() {\n        // set title\n        $(\"#center .unified-panel-title\").text(`${this.ui.view.config.get_value(\"name\")} (${this.ui.view.dbkey})`);\n\n        // add dataset\n        if (window.galaxy_config.app.add_dataset)\n            $.ajax({\n                url: `${Galaxy.root}api/datasets/${window.galaxy_config.app.add_dataset}`,\n                data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                dataType: \"json\",\n                success: track_data => {\n                    this.ui.view.add_drawable(tracks.object_from_template(track_data, this.ui.view, this.ui.view));\n                }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(() => {\n            // add new bookmark.\n            var position = `${this.ui.view.chrom}:${this.ui.view.low}-${this.ui.view.high}`;\n\n            var annotation = \"Bookmark description\";\n            return this.ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        this.ui.init_keyboard_nav(this.ui.view);\n\n        $(window).on(\"beforeunload\", () => {\n            if (this.ui.view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n\n    // create\n    create_browser(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        this.ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: name,\n                dbkey: dbkey\n            },\n            window.galaxy_config.app.gene_region\n        );\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        this.ui.view.editor = true;\n    }\n}\n\nexport default {\n    TracksterUI: TracksterUI,\n    GalaxyApp: TracksterUIView\n};\n"]}