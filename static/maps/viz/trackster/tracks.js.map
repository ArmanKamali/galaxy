{"version":3,"sources":["viz/trackster/tracks.js"],"names":["is_container","element","obj","html_elt_js_obj_dict","attr","moveable","handle_class","container_selector","element_js_obj","bind","handle","relative","e","d","child","container","top","bottom","i","parent","$","this","extend","children","this_obj","parents","length","outerHeight","cur_container","offsetY","insertBefore","remove_drawable","add_drawable_before","insertAfter","add_drawable","position","get","find","prepend","append","hasClass","move_drawable","deltaY","removeClass","round","num","places","MAX_FEATURE_DEPTH","val","Math","pow","MAX_CHROMS_SELECTABLE","promise","Deferred","ajax","type","DATA_NOCONVERTER","beforeSend","xhr","DATA_NONE","DATA_PENDING","result","status","resolve","TILE_CACHE_SIZE","_","Backbone","CONTINUOUS_DATA_MODES","Drawable","supportsByteRanges","obj_dict","id_counter","url","setRequestHeader","drag_handle_class","success","config","_config2","default","ConfigSettingCollection","from_models_and_saved_values","build_config_params","prefs","get_value","set_value","name","config_onchange","on","container_div","build_container_div","header_div","header","header_view","_viz_views2","TrackHeaderView","model","id","$el","icons_div","is_overview","hover","show","hide","prototype","title","css_class","on_click_fn","drawable","toggle_icon","addClass","action_icons","ConfigSettingCollectionView","collection","render_in_modal","_localization2","config_params","key","label","default_value","init","hidden","options","to_dict","changed","new_name","old_name","revert_name","remove","view","set_name","update_icons","show_contents","get_drawables","DrawableCollection","call","obj_type","drawables","unpack_drawables","drawables_array","object_from_template","_draw","dictified_drawables","push","to_key_value_dict","other","index","replace_drawable","old_drawable","new_drawable","update_html","indexOf","replaceWith","splice","new_position","get_tracks","track_type","slice","tracks","queue","shift","concat","DrawableGroup","content_div","filters_manager","_filters2","FiltersManager","after","parent_div","filters","visible","action_icons_def","saved_filters_managers","group","show_composite_track","setup_multitrack_filtering","_restore_filter_managers","toggle","hide_contents","num_drawables","tiles_div","filters_icon","composite_icon","CompositeTrack","j","a_type","get_type","num_feature_tracks","FeatureTrack","LineTrack","same_type","shared_filters","filter","remove_all","filter_name","new_filter","add_filter","init_filters","composite_track","request_draw","each","TracksterView","View","initialize","vis_id","dbkey","stand_alone","undefined","label_tracks","tracks_to_be_redrawn","max_low","max_high","zoom_factor","min_separation","canvas_manager","_visualization2","CanvasManager","ownerDocument","load_chroms_deferred","render","parent_element","top_container","appendTo","browser_content_div","bottom_container","top_labeltrack","viewport_container","intro_div","text","select_datasets","nav_container","click","track","overview_close","overview_highlight","prependTo","overview_box_background","nav","overview_box","default_overview_height","chrom_select","submit_nav","overview","location_span","stopPropagation","nav_input","overview_viewport","chrom","source","request","response","nav_controls","all_features","when","done","feature_search_deferreds","keyCode","which","zoom_in","tooltip","placement","change_chrom","low","high","css","select","focus","autocomplete","map","t","data_manager","search_features","term","dataset_features","feature","value","minLength","hidden_input","offsetX","current_x","delta_chrom","move_delta","zo_link","reset_overview","clientX","zi_link","original_low","current_height","new_scroll","clientY","pageX","width","min","max","span","delta","scrollTop","reset","window","trigger","height","get_base_color","proxy","left","startX","offset","abs","has_changes","update_intro_div","update_location","trigger_navigate","old_low","clearTimeout","timer","delay","request_redraw","add_label_track","LabelTrack","url_parms","resize_timer","data","setTimeout","dataType","document","chrom_info","redraw","base","toLowerCase","chrom_start_index","start_index","_this","chrom_data","new_chrom","new_low","new_high","_util2","commatize","load_chroms","_this2","Galaxy","root","reference","found","ReferenceTrack","ref_track","html","len","chrom_option","prev_chroms","next_chroms","reference_track","error","alert","chrom_pos","split","v","move_fraction","fraction","current_chrom_span","parseInt","go_to","str","replace","self","label_track","data_fetch","redraw_on_move_fn","track_options","requested_redraw","_redraw","track_list","width_px","min_width_px","to","requestAnimationFrame","cur_center","new_half","resolution_px_b","left_px","set_overview","overview_drawable","resize_window","point","zoom_out","Tool","resize_viewport","state_dict","dataset","events","copy","param_div","postdraw_actions","html_div","param","TracksterToolView","_tools2","keydown","tool_state","set","remove_inputs","get_inputs_dict","is_visible","ToolParameterView","run_on_dataset_button","run_on_dataset","set_visible","update_params","update_value","update_event","target","target_dataset_id","action","tool_id","Close","tool","start","end","url_params","param_view","run_tool_row","run_on_region","new_track","track_name","run","ajax_settings","JSON","stringify","contentType","buttons","interval","modal","success_callback","FilterScaler","regions","region","Scaler","gen_val","feature_data","Tile","canvas","w_scale","constructor","hda_ldda","init_for_tool_data","change_mode","mode","LineTrackTile","predisplay_actions","FeatureTrackTile","all_slotted","track_data","feature_mapper","incomplete_features","inputs","ss_deferred","ServerStateDeferred","success_fn","go","then","message","default_val","_painters2","Number","MAX_VALUE","parseFloat","html_elt","stale","seq_data","has_icons","other_tiles_features_drawn","Track","regions_to_use","view_region","Model","_data2","Dataset","dataset_check_type","data_query_wait","GenomeDataManager","dataset_id","data_mode_compatible","data_and_mode_compatible","can_subset","min_height_px","max_height_px","visible_height_px","resize","body","set_dataset","add_resize_handle","clear_filters","in_drag","in_handle","drag_control","tool_region_and_parameters_str","No","unbind","Yes","GenomeRegion","bookmarked_regions","elt","show_message","location","href","msg_html","Collection","toJSON","can_draw","init_deferred","params","msg_elt","valid_chroms","original_height","apply","predraw_init","new_height","tile_cache","clear","stats","min_value","set_default_value","ReadTrack","VariantTrack","retry","left_offset","enabled","tool_view","dynamic_tool_div","TiledTrack","kind","set_min_max","data_type","slotters","getJSON","clear_tile_cache","floor","mean","sd","max_value","ceil","filters_available","TracksterTool","before_draw","Cache","set_filters_manager","overlay_div","max_rows","tile_index","tile_region","tile_promises","tile_promise","tiles","_add_yaxis_label","isNaN","on_change","num_cols","on_finish","new_val","new_mode","line_track_tiles","mode_icon","draw_helper","tile","tools_icon","param_space_viz_icon","_gen_tile_cache_key","icons_present","_this3","_get_drawables","clear_after","resolution","tile_width","get_tile_data","m","tile_drawn","tile_data","_this4","pref_name","drawing_heights","make_text_editable","tile_low","tile_high","help_text","_this5","set_elt","force","get_mode","update_auto_mode","display_mode","_this6","tile_element","get_elt","show_tile","data_mode","get_data","data_url_extra_params","region_str","param_str","values","tracks_data","is_deferred","entry","extra_info","dataset_type","subset_entry","pop","drawing_modes","get_canvas_height","new_canvas","ctx","getContext","translate","globalAlpha","globalCompositeOperation","draw_tile","canvas_width","range","tickDistance","new_div","LinePainter","draw","ref_seq","track_height","toString","join","log","screenPosition","display_modes","update_all_min_max","union","data_url","cur_visible","new_visible","visible_height","on_resize","init_deferreds","font","textAlign","show_group","_draw_line_track_tile","max_height","DiagonalHeatmapTrack","char_width_px","GenomeReferenceDataManager","is","painter","subset","manager","default_font","str_len","c","help","_bbiDataManager2","BBIDataManager","set_painter_from_config","features","new_canvas_ctx","drawImage","new_tile","all_incomplete_features","DiagonalHeatmapPainter","summary_draw_height","start_end_dct","incremental_slots","dummy_context","slotter","dummy_painter","ArcLinkedFeaturePainter","slots","_this7","hide_feature","inc_features","omit","f","filter_height_scaler","tile_incomplete_features","keys","height_filter","fillStyle","draw_results","cur_tile","update_ui_elt","applies_to","example_feature","show_more_rows_icon","num_samples","level","deferreds","_slotting2","FeatureSlotter","x","measureText","slot_features","font_size","rows_required","get_required_height","flen","keep","alpha_filter","filtered","b","addable_objects","VcfTrack","drawable_type","VariantPainter","get_metadata","match","fetch","sample_names","font-size","samples_div_html","line-height","ReadPainter","template"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["import _l from \"utils/localization\";\nimport * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n/* global $ */\n/* global Galaxy */\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nfunction is_container(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n}\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nfunction moveable(element, handle_class, container_selector, element_js_obj) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: `.${handle_class}`, relative: true }, function(e, d) {\n            var element = $(this);\n            var parent = element.parent();\n            // Only sorting amongst tracks and groups.\n            var children = parent.children(\".track,.group\");\n            var this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")];\n            var child;\n            var container;\n            var top;\n            var bottom;\n            var i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(this_obj, cur_container);\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (child.is(container_selector) && this !== child.get(0) && d.offsetY >= top && d.offsetY <= bottom) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\"))\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, d.deltaY > 0 ? i - 1 : i);\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n}\n\n/**\n * Init constants & functions used throughout trackster.\n */\n\n// Padding at the top of tracks for error messages\nconst ERROR_PADDING = 20;\n\n// Maximum number of rows un a slotted track\nconst MAX_FEATURE_DEPTH = 100;\n\n// Minimum width for window for squish to be used.\nconst MIN_SQUISH_VIEW_WIDTH = 12000;\n\n// Number of pixels per tile, not including left offset.\nconst TILE_SIZE = 400;\n\nconst DEFAULT_DATA_QUERY_WAIT = 5000;\n\n// Maximum number of chromosomes that are selectable at any one time.\nconst MAX_CHROMS_SELECTABLE = 100;\n\nconst DATA_ERROR = \"Cannot display dataset due to an error. \";\n\nconst DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\";\n\nconst DATA_NONE = \"No data for this chrom/contig.\";\n\nconst DATA_PENDING =\n    \"Preparing data. This can take a while for a large dataset. \" +\n    \"If the visualization is saved and closed, preparation will continue in the background.\";\n\nconst DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \";\n//var DATA_LOADING = \"Loading data...\";\nconst DATA_OK = \"Ready for display\";\nconst TILE_CACHE_SIZE = 10;\n//var DATA_CACHE_SIZE = 20;\n//\n// Numerical/continuous data display modes.\nconst CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n        this.build_config_params(),\n        obj_dict.prefs\n    );\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            () => {\n                icons_div.show();\n            },\n            () => {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: _l(\"Edit settings\"),\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: _l(\"Remove\"),\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    build_config_params: function() {\n        return this.config_params;\n    },\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0);\n\n        var tracks = [];\n        var drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", `group_${this.id}_content_div`)\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: _l(\"Show composite track\"),\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: _l(\"Filters\"),\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                } else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\")\n            .addClass(\"group\")\n            .attr(\"id\", `group_${this.id}`);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function() {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        } else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        } else {\n            // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i;\n\n            var j;\n            var drawable;\n            var same_type = true;\n            var a_type = this.drawables[0].get_type();\n            var num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            } else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {};\n\n                var filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                for (var filter_name in shared_filters) {\n                    let filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        let new_filter = new filters_mod.NumberFilter({\n                            name: filters[0].name,\n                            index: filters[0].index\n                        });\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            } else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                var drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value(\"name\"),\n            drawables: this.drawables\n        });\n        this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), {\n            filters: this.filters_manager.to_dict()\n        });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, d => {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(this.container.get(0).ownerDocument);\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container;\n\n        var view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        // Add tracks button\n        $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(() => {\n                visualization.select_datasets({ dbkey: view.dbkey }, tracks => {\n                    _.each(tracks, track => {\n                        view.add_drawable(object_from_template(track, view, view));\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(() => {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(`${view.chrom}:${view.low}-${view.high}`);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [];\n\n                    var feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), t =>\n                        t.data_manager.search_features(request.term).success(dataset_features => {\n                            all_features = all_features.concat(dataset_features);\n                        })\n                    );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(() => {\n                        response(\n                            $.map(all_features, feature => ({\n                                label: feature[0],\n                                value: feature[1]\n                            }))\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", () => {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low));\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(() => {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", (e, d) => {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", (e, d) => {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1)\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", (e, d) => {\n                $(d.proxy).css({\n                    left: Math.min(e.pageX, d.startX) - view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n\n                var min = Math.min(e.pageX, d.startX) - view.container.offset().left;\n\n                var max = Math.max(e.pageX, d.startX) - view.container.offset().left;\n\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", (e, d) => {\n                var min = Math.min(e.pageX, d.startX);\n                var max = Math.max(e.pageX, d.startX);\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                var old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(new LabelTrack(this, { content_div: this.top_labeltrack }));\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                window.clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = window.setTimeout(() => {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", () => {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(`${base.toLowerCase()}_color`) || this.config.get_value(\"n_color\");\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            window.clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            this.timer = window.setTimeout(() => {\n                this.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n            }, 500);\n        } else {\n            this.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(`${util.commatize(low)} - ${util.commatize(high)}`);\n        this.nav_input.val(`${this.chrom}:${util.commatize(low)}-${util.commatize(high)}`);\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var chrom_data = $.Deferred();\n        $.ajax({\n            url: `${Galaxy.root}api/genomes/${this.dbkey}`,\n            data: url_parms,\n            dataType: \"json\",\n            success: result => {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(this);\n                    this.add_label_track(ref_track);\n                    this.reference_track = ref_track;\n                }\n                this.chrom_data = result.chrom_info;\n\n                this.chrom_select.html(\"\");\n                this.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = this.chrom_data.length; i < len; i++) {\n                    var chrom = this.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    this.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    this.chrom_select.append($(`<option value=\"previous\">Previous ${MAX_CHROMS_SELECTABLE}</option>`));\n                }\n                if (result.next_chroms) {\n                    this.chrom_select.append($(`<option value=\"next\">Next ${MAX_CHROMS_SELECTABLE}</option>`));\n                }\n                this.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(`Could not load chroms for this dbkey: ${this.dbkey}`);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(() => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, (v, i) => v.chrom === chrom)[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, () => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/);\n\n        var chrom = chrom_pos[0];\n        var new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined;\n        var new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            window.clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = window.setTimeout(() => {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", () => {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this;\n\n        var // Either redrawing a single drawable or all view's drawables.\n        track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, track => {\n            var track_options = _.find(view.tracks_to_be_redrawn, to => to[0] === track);\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            window.requestAnimationFrame(() => {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low;\n        var high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = this.low / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var width_px = (this.high - this.low) / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px) / 2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, track_options => {\n            var track = track_options[0];\n            var options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, label_track => {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() - this.top_container.height() - this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n            content_div: this.overview_viewport\n        });\n\n        var view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = () => {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() + view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        this.resize_window();\n        this.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\");\n        var param = this.model;\n\n        // Param label.\n        $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n        var tool = this.model;\n        var parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", e => {\n                e.stopPropagation();\n            })\n            .click(e => {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", e => {\n                e.stopPropagation();\n            })\n            .keydown(e => {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(param => {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(() => {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(() => {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            track_data => {\n                Galaxy.modal.show({\n                    title: `${tool.get(\"name\")} is Running`,\n                    body: `${tool.get(\n                        \"name\"\n                    )} is running on the complete dataset. Tool outputs are in dataset's history.`,\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\");\n\n        var tool = this.model;\n\n        var region = new visualization.GenomeRegion({\n            chrom: track.view.chrom,\n            start: track.view.low,\n            end: track.view.high\n        });\n\n        var url_params = {\n            target_dataset_id: track.dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id,\n            regions: [region.toJSON()]\n        };\n\n        // Set name of track to include tool name, parameters, and region used.\n        var track_name = tool.get(\"name\") + track.tool_region_and_parameters_str(region);\n\n        var container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (track.container === track.view) {\n            // Create new group.\n            var group = new DrawableGroup(track.view, track.view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = track.container.replace_drawable(track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(track.view.content_div.children()[index]);\n            group.add_drawable(track);\n            track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new track.constructor(track.view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(track.mode);\n        new_track.set_filters_manager(track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track, track_data => {\n            new_track.set_dataset(new data.Dataset(track_data));\n            new_track.tiles_div.text(\"Running job.\");\n            new_track.init();\n        });\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: `${Galaxy.root}api/tools`,\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(response => {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (parseFloat(feature_data[this.filter.index]) - this.filter.low) / (this.filter.high - this.filter.low);\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = () => {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = () => {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = () => {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait = \"data_query_wait\" in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: _l(\"Set display mode\"),\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: _l(\"Set as overview\"),\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: _l(\"Filters\"),\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: _l(\"Tool\"),\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value(\"name\") + track.tool_region_and_parameters_str());\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: _l(\"Tool parameter space visualization\"),\n            css_class: \"arrow-split\",\n            on_click_fn: track => {\n                var html = `\n                    <strong>Tool</strong>:${track.tool.get(\"name\")}<br/>\n                    <strong>Dataset</strong>:${track.config.get_value(\"name\")}<br/>\n                    <strong>Region(s)</strong>:\n                        <select name=\"regions\">\n                            <option value=\"cur\">current viewing area</option>\n                            <option value=\"bookmarks\">bookmarks</option>\n                            <option value=\"both\">current viewing area and bookmarks</option>\n                        </select>\n                    `;\n\n                var cancel_fn = () => {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                };\n\n                var ok_fn = () => {\n                    var regions_to_use = $('select[name=\"regions\"] option:selected').val();\n                    var regions;\n                    var view_region = new visualization.GenomeRegion({\n                        chrom: this.view.chrom,\n                        start: this.view.low,\n                        end: this.view.high\n                    });\n                    var bookmarked_regions = _.map(\n                        $(\".bookmark\"),\n                        elt =>\n                            new visualization.GenomeRegion({\n                                from_str: $(elt)\n                                    .children(\".position\")\n                                    .text()\n                            })\n                    );\n\n                    // Get regions for visualization.\n                    if (regions_to_use === \"cur\") {\n                        // Use only current region.\n                        regions = [view_region];\n                    } else if (regions_to_use === \"bookmarks\") {\n                        // Use only bookmarks.\n                        regions = bookmarked_regions;\n                    } else {\n                        // Use both current region and bookmarks.\n                        regions = [view_region].concat(bookmarked_regions);\n                    }\n\n                    Galaxy.modal.hide();\n\n                    // Go to visualization.\n                    window.location.href = `${Galaxy.root}visualization/sweepster?${$.param({\n                        dataset_id: track.dataset.id,\n                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                        regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                    })}`;\n                };\n\n                /*\n                 * TODO: Re-enable this when functional.\n                var check_enter_esc = e => {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n                */\n\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", `track_${this.id}`);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            () => {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            () => {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", (e, d) => {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", (e, d) => {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px = track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", (e, d) => {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred();\n\n        var params = {\n            hda_ldda: track.dataset.get(\"hda_ldda\"),\n            data_type: this.dataset_check_type,\n            chrom: track.view.chrom,\n            retry: retry\n        };\n\n        $.getJSON(this.dataset.url(), params, result => {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(() => {\n                                Galaxy.modal.show({\n                                    title: _l(\"Trackster Error\"),\n                                    body: `<pre>${result.message}</pre>`,\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(() => {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined && (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                window.setTimeout(() => {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\"height\", `${track.visible_height_px}px`);\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(() => {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                    max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, \"filters\" in obj_dict ? obj_dict.filters : null);\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                    max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: ${track.mode})`);\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return `${w_scale}_${tile_region}`;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after;\n        var low = this.view.low;\n        var high = this.view.high;\n        //var range = high - low;\n        var width = this.view.container.width();\n        var w_scale = this.view.resolution_px_b;\n        var resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (this.view.max_high - this.view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n        tile_width = Math.floor(TILE_SIZE * resolution);\n\n        var // Index of first tile that overlaps visible region.\n        tile_index = Math.floor(low / tile_width);\n\n        var tile_region;\n        var tile_promise;\n        var tile_promises = [];\n        var tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(tile => {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        $.when.apply($, tile_promises).then(() => {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            this.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, t => t !== null);\n            if (tiles.length !== 0) {\n                this.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var css_class = type === \"max\" ? \"top\" : \"bottom\";\n        var text = type === \"max\" ? \"max\" : \"min\";\n        var pref_name = type === \"max\" ? \"max_value\" : \"min_value\";\n        var label = this.container_div.find(`.yaxislabel.${css_class}`);\n        var value = round(this.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            (() => {\n                this.request_draw({ clear_tile_cache: true });\n            });\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        this.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: `Set ${text} value`\n                })\n                .addClass(`yaxislabel ${css_class}`)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, tile => tile instanceof LineTrackTile);\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            _.each(tiles, tile => {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    this.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            this._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, tile => tile.has_icons);\n\n            if (icons_present) {\n                _.each(tiles, tile => {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force;\n        var mode = options.mode || this.mode;\n        var resolution = 1 / w_scale;\n\n        var drawables = this._get_drawables();\n        var key = this._gen_tile_cache_key(w_scale, region);\n\n        var is_tile = o => o && \"track\" in o;\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : this.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                this.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = () => {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, m => m === mode) ? \"Coverage\" : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, (\n                d // Get the track data/promise.\n            ) => d.data_manager.get_data(region, data_mode, resolution, this.data_url_extra_params));\n\n            // Get reference data/promise.\n            if (this.view.reference_track) {\n                tile_data.push(\n                    this.view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        this.view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        this.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(() => {\n            var tile_data = get_tile_data();\n            var tracks_data = tile_data;\n            var seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, d => util.is_deferred(d))) {\n                this.tile_cache.set_elt(key, undefined);\n                $.when(this.draw_helper(region, w_scale, options)).then(tile => {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (this.view.reference_track) {\n                seq_data = this.view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [];\n            var drawing_heights = [];\n\n            _.each(drawables, (d, i) => {\n                var data = tracks_data[i];\n                if (d.mode === \"Auto\") {\n                    d.mode = d.get_mode(data);\n                    d.update_auto_mode(d.mode);\n                }\n                drawing_modes.push(d.mode);\n                drawing_heights.push(d.get_canvas_height(data, d.mode, w_scale, width));\n            });\n\n            var canvas = this.view.canvas_manager.new_canvas();\n            var tile_low = region.get(\"start\");\n            var tile_high = region.get(\"end\");\n            var width = Math.ceil((tile_high - tile_low) * w_scale) + this.left_offset;\n            var height = _.max(drawing_heights);\n            var tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(this.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, (d, i) => {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                this.tile_cache.set_elt(key, tile);\n                this.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ([undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ([undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1) {\n            this.config.set_value(\"max_value\", _.max(_.map(result.data, d => d[1])) || 0);\n        }\n\n        var canvas = ctx.canvas;\n\n        var painter = new painters.LinePainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round((tile.low - (this.is_overview ? this.view.max_low : this.view.low)) * w_scale);\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", `${this.max_height_px}px`);\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", `${track_height}px`);\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this;\n        var region_str = region !== undefined ? region.toString() : \"all\";\n        var param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return ` - region=[${region_str}], parameters=[${param_str}]`;\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (data.dataset_type === \"bigwig\" || data.extra_info === \"no_detail\") {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view;\n        var range = view.high - view.low;\n\n        var tickDistance = Math.floor(Math.pow(10, Math.floor(Math.log(range) / Math.log(10))));\n\n        var position = Math.floor(view.low / tickDistance) * tickDistance;\n        var width = this.view.container.width();\n        var new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor((position - view.low) / range * width);\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, d => {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: _l(\"Show individual tracks\"),\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, d => {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(() => {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n            name: this.config.get_value(\"name\")\n        });\n\n        var track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, d => d.config.get_value(\"min_value\")));\n\n        var max = _.max(_.map(this.drawables, d => d.config.get_value(\"max_value\")));\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var min_value = this.config.get_value(\"min_value\");\n        var max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1;\n\n        var i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this;\n\n        var t = () => {\n            track.update_all_min_max();\n        };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = `${Galaxy.root}api/genomes/${this.view.dbkey}`;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\");\n        var new_visible;\n        var tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region);\n\n        var seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(`${Galaxy.root}datasets/${this.dataset.id}/display`)).then(supportsByteRanges => {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"pos_color\",\n                label: \"Positive Color\",\n                type: \"color\",\n                default_value: \"#FF8C00\"\n            },\n            {\n                key: \"neg_color\",\n                label: \"Negative Color\",\n                type: \"color\",\n                default_value: \"#4169E1\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"int\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"int\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 500,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                // What does this do?  Is it meant to be attached to some higher scope state object?\n                // var data = result.data;\n            }\n        );\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas;\n\n        var painter = new painters.DiagonalHeatmapPainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n    this.set_painter_from_config();\n};\n\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help: \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), inc_features => {\n                _.each(inc_features, feature => {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            _.each(tiles, tile => {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, f => f[0])\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                        data: _.values(tile_incomplete_features)\n                    };\n\n                    var new_canvas = this.view.canvas_manager.new_canvas();\n                    var new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        this.get_canvas_height(features, tile.mode, tile.w_scale, 100)\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(this.left_offset, 0);\n                    var new_tile = this.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (this.filters_manager) {\n            var filters = this.filters_manager.filters;\n            var f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false;\n\n            var example_feature;\n            var filter;\n            for (let i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (filter.applies_to(example_feature) && filter.min !== filter.max) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (this.filters_available !== filters_available) {\n                this.filters_available = filters_available;\n                if (!this.filters_available) {\n                    this.filters_manager.hide();\n                }\n                this.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (let i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: Auto/${mode})`);\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context;\n\n        var slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(level, mode, MAX_FEATURE_DEPTH, x => dummy_context.measureText(x));\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width));\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this;\n        var canvas = ctx.canvas;\n        var tile_low = region.get(\"start\");\n        var tile_high = region.get(\"end\");\n        var left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [];\n\n        var slots = this.slotters[w_scale].slots;\n        var all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n            ? new FilterScaler(this.filters_manager.alpha_filter)\n            : null;\n\n        var filter_height_scaler = this.filters_manager.height_filter\n            ? new FilterScaler(this.filters_manager.height_filter)\n            : null;\n\n        var painter = new this.painter(\n            filtered,\n            tile_low,\n            tile_high,\n            this.config.to_key_value_dict(),\n            mode,\n            filter_alpha_scaler,\n            filter_height_scaler,\n            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n            ref_seq,\n            b => track.view.get_base_color(b)\n        );\n\n        var feature_mapper = null;\n        var incomplete_features = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view;\n\n            var painter = new this.painter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode,\n                b => view.get_base_color(b)\n            );\n\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": `${font_size}px`,\n                            top: `${(this.config.get_value(\"summary_height\") - font_size) / 2}px`\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = `${this.mode === \"Squish\" ? 5 : 10}px`;\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"detail_block_color\",\n                label: \"Sense strand block color\",\n                type: \"color\",\n                default_value: \"#AAAAAA\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand block color\",\n                type: \"color\",\n                default_value: \"#DDDDDD\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_insertions\",\n                label: \"Show insertions\",\n                type: \"bool\",\n                default_value: false\n            },\n            {\n                key: \"show_differences\",\n                label: \"Show differences only\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = (template, view, container) => {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n"]}