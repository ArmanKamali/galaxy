{"version":3,"sources":["mvc/history/history-list.js"],"names":["HistoryGridView","_gridView2","default","extend","initialize","grid_config","this","ajaxQueue","_ajaxQueue2","AjaxQueue","prototype","call","init_grid_elements","stop","$","makeArray","$el","find","map","i","el","historyId","data","url","Galaxy","root","options","type","success","req","contentsStates","stateHtml","_i","_arr","length","state","stateCount","fetchDetails","deleted","contentsActive","hidden","html","jQuery","forEach","fn","add","start","_showCopyDialog","history","fetch","fail","window","parent","currHistoryPanel","xhr","ajax","loadCurrentHistory","location","reload","popup","operation","item","self","operation_config","label","id","alert","settings","allowed","target","confirmation_text","confirm","func","e","preventDefault","_add_operation","onclick","findItemByHtml","_loadingIndicator2","markViewAsLoading","_utils2","get","params","response","model","set","render","View","title","attributes","append","grid"],"mappings":"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","file":"../../../scripts/mvc/history/history-list.js","sourcesContent":["import _l from \"utils/localization\";\nimport AjaxQueue from \"utils/ajax-queue\";\nimport Utils from \"utils/utils\";\n/** This class renders the grid list. */\nimport GridView from \"mvc/grid/grid-view\";\nimport HistoryModel from \"mvc/history/history-model\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport LoadingIndicator from \"ui/loading-indicator\";\n\nvar HistoryGridView = GridView.extend({\n    initialize: function(grid_config) {\n        this.ajaxQueue = new AjaxQueue.AjaxQueue();\n        GridView.prototype.initialize.call(this, grid_config);\n    },\n\n    init_grid_elements: function() {\n        const ajaxQueue = this.ajaxQueue;\n        ajaxQueue.stop();\n        GridView.prototype.init_grid_elements.call(this);\n        const fetchDetails = $.makeArray(\n            this.$el.find(\".delayed-value-datasets_by_state\").map((i, el) => {\n                return () => {\n                    const historyId = $(el).data(\"history-id\");\n                    const url = `${\n                        Galaxy.root\n                    }api/histories/${historyId}?keys=nice_size,contents_active,contents_states`;\n                    const options = {};\n                    options.url = url;\n                    options.type = \"GET\";\n                    options.success = req => {\n                        const contentsStates = req[\"contents_states\"];\n                        let stateHtml = \"\";\n                        for (let state of [\"ok\", \"running\", \"queued\", \"new\", \"error\"]) {\n                            const stateCount = contentsStates[state];\n                            if (stateCount) {\n                                stateHtml += `<div class=\"count-box state-color-${state}\" title=\"Datasets in ${state} state\">${stateCount}</div> `;\n                            }\n                        }\n                        const contentsActive = req[\"contents_active\"];\n                        const deleted = contentsActive[\"deleted\"];\n                        if (deleted) {\n                            stateHtml += `<div class=\"count-box state-color-deleted\" title=\"Deleted datasets\">${deleted}</div> `;\n                        }\n                        const hidden = contentsActive[\"hidden\"];\n                        if (hidden) {\n                            stateHtml += `<div class=\"count-box state-color-hidden\" title=\"Hidden datasets\">${hidden}</div> `;\n                        }\n                        $(`.delayed-value-datasets_by_state[data-history-id='${historyId}']`).html(stateHtml);\n                        $(`.delayed-value-disk_size[data-history-id='${historyId}']`).html(req[\"nice_size\"]);\n                    };\n                    var xhr = jQuery.ajax(options);\n                    return xhr;\n                };\n            })\n        );\n        fetchDetails.forEach(fn => ajaxQueue.add(fn));\n        ajaxQueue.start();\n    },\n    _showCopyDialog: function(id) {\n        var history = new HistoryModel.History({ id: id });\n        history\n            .fetch()\n            .fail(() => {\n                alert(\"History could not be fetched. Please contact an administrator\");\n            })\n            .done(() => {\n                historyCopyDialog(history, {}).done(() => {\n                    if (window.parent && window.parent.Galaxy && window.parent.Galaxy.currHistoryPanel) {\n                        window.parent.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                    window.location.reload(true);\n                });\n            });\n    },\n    /** Add an operation to the items menu */\n    _add_operation: function(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (operation.label == \"Copy\") {\n            operation.onclick = id => {\n                self._showCopyDialog(id);\n            };\n        }\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    }\n});\n\nvar View = Backbone.View.extend({\n    title: _l(\"Histories\"),\n    initialize: function(options) {\n        var self = this;\n        LoadingIndicator.markViewAsLoading(this);\n\n        this.model = new Backbone.Model();\n        Utils.get({\n            url: `${Galaxy.root}history/${options.action_id}?${$.param(Galaxy.params)}`,\n            success: function(response) {\n                self.model.set(response);\n                self.render();\n            }\n        });\n    },\n\n    render: function() {\n        var grid = new HistoryGridView(this.model.attributes);\n        this.$el.empty().append(grid.$el);\n    }\n});\n\nexport default {\n    View: View\n};\n"]}