{"version":3,"sources":["mvc/collection/collection-view.js"],"names":["collectionTypeDescription","collectionType","collection","get","countDescription","_localization2","default","collectionDescription","itemsDescription","elementCount","_super","_listView2","ModelListPanel","CollectionView","extend","_logNamespace","className","prototype","DatasetDCEViewClass","_collectionLi2","DatasetDCEListItemView","modelCollectionKey","initialize","call","this","attributes","linkTarget","logNamespace","hasUser","panelStack","parentName","foldoutStyle","Galaxy","root","model","id","getNestedDCDCEViewClass","NestedDCDCEListItemView","foldoutPanelClass","_queueNewRender","dragItems","$newRender","speed","fxSpeed","panel","log","_swapNewRender","trigger","viewLength","views","length","find","warning","_filterCollection","getVisibleContents","_getItemViewClass","$warns","TypeError","_getItemViewOptions","options","_","_setUpItemViewListeners","view","drilldown","v","_collapseDrilldownPanel","push","$","add","$list","$el","append","_expandDrilldownPanel","pop","render","events","click .navigation .back","close","event","remove","toString","templates","subtitle","escape","name","element_identifier","controlsTemplate","downloadUrl"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-view.js","sourcesContent":["import LIST_VIEW from \"mvc/list/list-view\";\nimport DC_MODEL from \"mvc/collection/collection-model\";\nimport DC_LI from \"mvc/collection/collection-li\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"collections\";\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class non-editable, read-only View/Controller for a dataset collection.\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar CollectionView = _super.extend(\n    /** @lends CollectionView.prototype */ {\n        //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n        _logNamespace: logNamespace,\n\n        className: `${_super.prototype.className} dataset-collection-panel`,\n\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_LI.DatasetDCEListItemView,\n\n        /** key of attribute in model to assign to this.collection */\n        modelCollectionKey: \"elements\",\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n         *  @param {Object} attributes optional settings for the panel\n         */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n            this.dragItems = true;\n            this.hasUser = attributes.hasUser;\n            /** A stack of panels that currently cover or hide this panel */\n            this.panelStack = [];\n            /** The text of the link to go back to the panel containing this one */\n            this.parentName = attributes.parentName;\n            /** foldout or drilldown */\n            this.foldoutStyle = attributes.foldoutStyle || \"foldout\";\n            this.downloadUrl = `${Galaxy.root}api/dataset_collections/${this.model.attributes.id}/download`;\n        },\n\n        getNestedDCDCEViewClass: function() {\n            return DC_LI.NestedDCDCEListItemView.extend({\n                foldoutPanelClass: CollectionView\n            });\n        },\n\n        _queueNewRender: function($newRender, speed) {\n            speed = speed === undefined ? this.fxSpeed : speed;\n            var panel = this;\n            this.handleWarning($newRender);\n            panel.log(\"_queueNewRender:\", $newRender, speed);\n\n            // TODO: jquery@1.12 doesn't change display when the elem has display: flex\n            // this causes display: block for those elems after the use of show/hide animations\n            // animations are removed from this view for now until fixed\n            panel._swapNewRender($newRender);\n            panel.trigger(\"rendered\", panel);\n        },\n\n        handleWarning: function($newRender) {\n            var viewLength = this.views.length;\n            var elementCount = this.model.get(\"element_count\");\n            if (elementCount && elementCount !== viewLength) {\n                var warning = _l(`displaying only ${viewLength} of ${elementCount} items`);\n                var $warns = $newRender.find(\".elements-warning\");\n                $warns.html(`<div class=\"warningmessagesmall\">${warning}</div>`);\n            }\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** In this override, use model.getVisibleContents */\n        _filterCollection: function() {\n            //TODO: should *not* be model.getVisibleContents - visibility is not model related\n            return this.model.getVisibleContents();\n        },\n\n        /** override to return proper view class based on element_type */\n        _getItemViewClass: function(model) {\n            //this.debug( this + '._getItemViewClass:', model );\n            //TODO: subclasses use DCEViewClass - but are currently unused - decide\n            switch (model.get(\"element_type\")) {\n                case \"hda\":\n                    return this.DatasetDCEViewClass;\n                case \"dataset_collection\":\n                    return this.getNestedDCDCEViewClass();\n            }\n            throw new TypeError(\"Unknown element type:\", model.get(\"element_type\"));\n        },\n\n        /** override to add link target and anon */\n        _getItemViewOptions: function(model) {\n            var options = _super.prototype._getItemViewOptions.call(this, model);\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                hasUser: this.hasUser,\n                //TODO: could move to only nested: list:paired\n                foldoutStyle: this.foldoutStyle\n            });\n        },\n\n        // ------------------------------------------------------------------------ collection sub-views\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n\n            // use pub-sub to: handle drilldown expansion and collapse\n            panel.listenTo(view, {\n                \"expanded:drilldown\": function(v, drilldown) {\n                    this._expandDrilldownPanel(drilldown);\n                },\n                \"collapsed:drilldown\": function(v, drilldown) {\n                    this._collapseDrilldownPanel(drilldown);\n                }\n            });\n            return this;\n        },\n\n        /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n        _expandDrilldownPanel: function(drilldown) {\n            this.panelStack.push(drilldown);\n            // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n            this.$(\"> .controls\")\n                .add(this.$list())\n                .hide();\n            drilldown.parentName = this.model.get(\"name\");\n            this.$el.append(drilldown.render().$el);\n        },\n\n        /** Handle drilldown close by freeing the panel and re-rendering this panel */\n        _collapseDrilldownPanel: function(drilldown) {\n            this.panelStack.pop();\n            this.render();\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: {\n            \"click .navigation .back\": \"close\"\n        },\n\n        /** close/remove this collection panel */\n        close: function(event) {\n            this.remove();\n            this.trigger(\"close\");\n        },\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return `CollectionView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nCollectionView.prototype.templates = (() => {\n    var controlsTemplate = (collection, view) => {\n        var subtitle = collectionDescription(view.model);\n        return `\n        <div class=\"controls\">\n            <div class=\"navigation\">\n            <a class=\"back\" href=\"javascript:void(0)\">\n                <span class=\"fa fa-icon fa-angle-left\"></span>\n                ${_l(\"Back to \")}\n                ${_.escape(view.parentName)}\n            </a>\n            </div>\n            <div class=\"title\">\n                <div class=\"name\">${_.escape(collection.name) || _.escape(collection.element_identifier)}</div>\n                <div class=\"subtitle\">\n                    ${subtitle}\n                </div>\n            </div>\n            <div class=\"elements-warning\">\n            </div>\n            <div class=\"tags-display\"></div>\n            <div class=\"actions\">\n                <a class=\"download-btn icon-btn\" href=\"${view.downloadUrl}\"\n                   title=\"\" download=\"\" data-original-title=\"Download Collection\">\n                   <span class=\"fa fa-floppy-o\"></span>\n                </a>\n            </div>\n        </div>`;\n    };\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        controls: controlsTemplate\n    });\n})();\n\nfunction collectionTypeDescription(collection) {\n    var collectionType = collection.get(\"collection_type\");\n    var collectionTypeDescription;\n    if (collectionType == \"list\") {\n        collectionTypeDescription = _l(\"list\");\n    } else if (collectionType == \"paired\") {\n        collectionTypeDescription = _l(\"dataset pair\");\n    } else if (collectionType == \"list:paired\") {\n        collectionTypeDescription = _l(\"list of pairs\");\n    } else {\n        collectionTypeDescription = _l(\"nested list\");\n    }\n    return collectionTypeDescription;\n}\n\nfunction collectionDescription(collection) {\n    var elementCount = collection.get(\"element_count\");\n\n    var itemsDescription = `a ${collectionTypeDescription(collection)}`;\n    if (elementCount) {\n        var countDescription;\n        if (elementCount == 1) {\n            countDescription = \"with 1 item\";\n        } else if (elementCount) {\n            countDescription = `with ${elementCount} items`;\n        }\n        itemsDescription = `${itemsDescription} ${_l(countDescription)}`;\n    }\n    return itemsDescription;\n}\n\n//==============================================================================\nexport default {\n    collectionTypeDescription: collectionTypeDescription,\n    collectionDescription: collectionDescription,\n    CollectionView: CollectionView\n};\n"]}