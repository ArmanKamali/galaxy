{"version":3,"sources":["mvc/workflow/workflow.js"],"names":["mod_toastr","WorkflowItemView","Backbone","View","extend","tagName","initialize","_","bindAll","this","options","timeOut","events","click #show-in-tool-panel","click #delete-workflow","click #rename-workflow","click #copy-workflow","render","$","el","html","_rowTemplate","showInToolPanel","model","save","show_in_tool_panel","get","success","window","location","Galaxy","root","removeWorkflow","wfName","confirm","destroy","remove","renameWorkflow","oldName","prompt","newName","_this","getJSON","urlRoot","id","wfJson","currentOwner","user","attributes","username","create","error","resp","errorThrown","copyWorkflow","textStatus","jqXHR","responseJSON","err_msg","show","wfId","trHtml","escape","at","_templateActions","renderTagEditor","TagEditor","_tag2","default","TagsEditor","workflow_mode","toggle","WorkflowListView","markViewAsLoading","_loadingIndicator2","collection","_workflowModel2","WorkflowCollection","fetch","done","bind","appendItem","on","dragover","ev","preventDefault","addClass","unhighlightDropZone","removeClass","drop","e","f","files","dataTransfer","i","readWorkflowFiles","reader","FileReader","onload","wf_json","JSON","parse","result","name","wait","readAsText","_showArgErrors","once","msg_text","msg_status","info","_this3","header","_templateHeader","templateActions","_templateActionButtons","tableTemplate","_templateWorkflowTable","$el","item","confirmDelete","searchWorkflow","minQueryLength","adjustActiondropdown","workflowItemView","append","workflow","$el_shared_wf_link","$el_searchinput","$el_tabletr","min_querylen","val","query","length","regular_expression","RegExp","test","text","css","_templateNoWorkflow","tableHtml","_localization2","_mainTemplate","ImportWorkflowView","setElement","_this4","empty","url","myexperiment_target_url"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow.js","sourcesContent":["/** Workflow view */\nimport * as mod_toastr from \"libs/toastr\";\nimport TAGS from \"mvc/tag\";\nimport WORKFLOWS from \"mvc/workflow/workflow-model\";\nimport QueryStringParsing from \"utils/query-string-parsing\";\nimport _l from \"utils/localization\";\nimport LoadingIndicator from \"ui/loading-indicator\";\n\n/** View of the individual workflows */\nconst WorkflowItemView = Backbone.View.extend({\n    tagName: \"tr\", // name of (orphan) root tag in this.el\n    initialize: function() {\n        _.bindAll(\n            this,\n            \"render\",\n            \"_rowTemplate\",\n            \"renderTagEditor\",\n            \"_templateActions\",\n            \"removeWorkflow\",\n            \"copyWorkflow\"\n        ); // every function that uses 'this' as the current object should be in here\n        mod_toastr.options.timeOut = 1500;\n    },\n\n    events: {\n        \"click #show-in-tool-panel\": \"showInToolPanel\",\n        \"click #delete-workflow\": \"removeWorkflow\",\n        \"click #rename-workflow\": \"renameWorkflow\",\n        \"click #copy-workflow\": \"copyWorkflow\"\n    },\n\n    render: function() {\n        $(this.el).html(this._rowTemplate());\n        return this;\n    },\n\n    showInToolPanel: function() {\n        // This reloads the whole page, so that the workflow appears in the tool panel.\n        // Ideally we would notify only the tool panel of a change\n        this.model.save(\n            { show_in_tool_panel: !this.model.get(\"show_in_tool_panel\") },\n            {\n                success: function() {\n                    window.location = `${Galaxy.root}workflows/list`;\n                }\n            }\n        );\n    },\n\n    removeWorkflow: function() {\n        const wfName = this.model.get(\"name\");\n        if (window.confirm(`Are you sure you want to delete workflow '${wfName}'?`)) {\n            this.model.destroy({\n                success: function() {\n                    mod_toastr.success(`Successfully deleted workflow '${wfName}'`);\n                }\n            });\n            this.remove();\n        }\n    },\n\n    renameWorkflow: function() {\n        const oldName = this.model.get(\"name\");\n        const newName = window.prompt(`Enter a new Name for workflow '${oldName}'`, oldName);\n        if (newName) {\n            this.model.save(\n                { name: newName },\n                {\n                    success: function() {\n                        mod_toastr.success(`Successfully renamed workflow '${oldName}' to '${newName}'`);\n                    }\n                }\n            );\n            this.render();\n        }\n    },\n\n    copyWorkflow: function() {\n        const oldName = this.model.get(\"name\");\n        $.getJSON(`${this.model.urlRoot}/${this.model.id}/download`, wfJson => {\n            let newName = `Copy of ${oldName}`;\n            const currentOwner = this.model.get(\"owner\");\n            if (currentOwner != Galaxy.user.attributes.username) {\n                newName += ` shared by user ${currentOwner}`;\n            }\n            wfJson.name = newName;\n            this.collection.create(wfJson, {\n                at: 0,\n                wait: true,\n                success: function() {\n                    mod_toastr.success(`Successfully copied workflow '${oldName}' to '${newName}'`);\n                },\n                error: function(model, resp, options) {\n                    // signature seems to have changed over the course of backbone dev\n                    // see https://github.com/jashkenas/backbone/issues/2606#issuecomment-19289483\n                    mod_toastr.error(options.errorThrown);\n                }\n            });\n        }).error((jqXHR, textStatus, errorThrown) => {\n            mod_toastr.error(jqXHR.responseJSON.err_msg);\n        });\n    },\n\n    _rowTemplate: function() {\n        let show = this.model.get(\"show_in_tool_panel\");\n        let wfId = this.model.id;\n        const checkboxHtml = `<input id=\"show-in-tool-panel\" type=\"checkbox\" class=\"show-in-tool-panel\" ${\n            show ? `checked=\"${show}\"` : \"\"\n        } value=\"${wfId}\">`;\n        const trHtml = `<td><div class=\"dropdown\"><button class=\"menubutton\" type=\"button\" data-toggle=\"dropdown\">${_.escape(\n            this.model.get(\"name\")\n        )}<span class=\"caret\"></span></button>${this._templateActions()}</div></td><td><span><div class=\"${wfId} tags-display\"></div></td><td>${\n            this.model.get(\"owner\") === Galaxy.user.attributes.username ? \"You\" : this.model.get(\"owner\")\n        }</span></td><td>${this.model.get(\"number_of_steps\")}</td><td>${\n            this.model.get(\"published\") ? \"Yes\" : \"No\"\n        }</td><td>${checkboxHtml}</td>`;\n        return trHtml;\n    },\n\n    renderTagEditor: function() {\n        const TagEditor = new TAGS.TagsEditor({\n            model: this.model,\n            el: $.find(`.${this.model.id}.tags-display`),\n            workflow_mode: true\n        });\n        TagEditor.toggle(true);\n        TagEditor.render();\n    },\n\n    /** Template for user actions for workflows */\n    _templateActions: function() {\n        if (this.model.get(\"owner\") === Galaxy.user.attributes.username) {\n            return `<ul class=\"dropdown-menu action-dpd\"><li><a href=\"${Galaxy.root}workflow/editor?id=${\n                this.model.id\n            }\">Edit</a></li><li><a href=\"${Galaxy.root}workflows/run?id=${this.model.id}\">Run</a></li><li><a href=\"${\n                Galaxy.root\n            }workflow/sharing?id=${this.model.id}\">Share</a></li><li><a href=\"${Galaxy.root}api/workflows/${\n                this.model.id\n            }/download?format=json-download\">Download</a></li><li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li><li><a id=\"rename-workflow\" style=\"cursor: pointer;\">Rename</a></li><li><a href=\"${\n                Galaxy.root\n            }workflow/display_by_id?id=${\n                this.model.id\n            }\">View</a></li><li><a id=\"delete-workflow\" style=\"cursor: pointer;\">Delete</a></li></ul>`;\n        } else {\n            return `<ul class=\"dropdown-menu action-dpd\"><li><a href=\"${\n                Galaxy.root\n            }workflow/display_by_username_and_slug?username=${this.model.get(\"owner\")}&slug=${this.model.get(\n                \"slug\"\n            )}\">View</a></li><li><a href=\"${Galaxy.root}workflows/run?id=${\n                this.model.id\n            }\">Run</a></li><li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li><li><a class=\"link-confirm-shared-${\n                this.model.id\n            }\" href=\"${Galaxy.root}workflow/sharing?unshare_me=True&id=${this.model.id}\">Remove</a></li></ul>`;\n        }\n    }\n});\n\n/** View of the main workflow list page */\nconst WorkflowListView = Backbone.View.extend({\n    title: _l(\"Workflows\"),\n    initialize: function() {\n        LoadingIndicator.markViewAsLoading(this);\n        _.bindAll(this, \"adjustActiondropdown\");\n        this.collection = new WORKFLOWS.WorkflowCollection();\n        this.collection.fetch().done(this.render());\n        this.collection.bind(\"add\", this.appendItem);\n        this.collection.on(\"sync\", this.render, this);\n    },\n\n    events: {\n        dragleave: \"unhighlightDropZone\",\n        drop: \"drop\",\n        dragover: function(ev) {\n            $(\".hidden_description_layer\").addClass(\"dragover\");\n            $(\".menubutton\").addClass(\"background-none\");\n            ev.preventDefault();\n        }\n    },\n\n    unhighlightDropZone: function() {\n        $(\".hidden_description_layer\").removeClass(\"dragover\");\n        $(\".menubutton\").removeClass(\"background-none\");\n    },\n\n    drop: function(e) {\n        // TODO: check that file is valid galaxy workflow\n        this.unhighlightDropZone();\n        e.preventDefault();\n        const files = e.dataTransfer.files;\n        for (let i = 0, f; (f = files[i]); i++) {\n            this.readWorkflowFiles(f);\n        }\n    },\n\n    readWorkflowFiles: function(f) {\n        const reader = new FileReader();\n        reader.onload = theFile => {\n            let wf_json;\n            try {\n                wf_json = JSON.parse(reader.result);\n            } catch (e) {\n                mod_toastr.error(`Could not read file '${f.name}'. Verify it is a valid Galaxy workflow`);\n                wf_json = null;\n            }\n            if (wf_json) {\n                this.collection.create(wf_json, {\n                    at: 0,\n                    wait: true,\n                    success: function() {\n                        mod_toastr.success(`Successfully imported workflow '${wf_json.name}'`);\n                    },\n                    error: function(model, resp, options) {\n                        mod_toastr.error(options.errorThrown);\n                    }\n                });\n            }\n        };\n        reader.readAsText(f, \"utf-8\");\n    },\n\n    _showArgErrors: _.once(() => {\n        // Parse args out of params, display if there's a message.\n        const msg_text = QueryStringParsing.get(\"message\");\n        const msg_status = QueryStringParsing.get(\"status\");\n        if (msg_status === \"error\") {\n            mod_toastr.error(_.escape(msg_text || \"Unknown Error, please report this to an administrator.\"));\n        } else if (msg_text) {\n            mod_toastr.info(_.escape(msg_text));\n        }\n    }),\n\n    render: function() {\n        // Add workflow header\n        const header = this._templateHeader();\n        // Add the actions buttons\n        const templateActions = this._templateActionButtons();\n        const tableTemplate = this._templateWorkflowTable();\n        this.$el.html(header + templateActions + tableTemplate);\n        _(this.collection.models).each(item => {\n            // in case collection is not empty\n            this.appendItem(item);\n            this.confirmDelete(item);\n        }, this);\n        const minQueryLength = 3;\n        this.searchWorkflow(this.$(\".search-wf\"), this.$(\".workflow-search tr\"), minQueryLength);\n        this.adjustActiondropdown();\n        this._showArgErrors();\n        return this;\n    },\n\n    appendItem: function(item) {\n        const workflowItemView = new WorkflowItemView({\n            model: item,\n            collection: this.collection\n        });\n        $(\".workflow-search\").append(workflowItemView.render().el);\n        workflowItemView.renderTagEditor();\n    },\n\n    /** Add confirm box before removing/unsharing workflow */\n    confirmDelete: function(workflow) {\n        const $el_shared_wf_link = this.$(`.link-confirm-shared-${workflow.id}`);\n        $el_shared_wf_link.click(() =>\n            window.confirm(`Are you sure you want to remove the shared workflow '${workflow.attributes.name}'?`)\n        );\n    },\n\n    /** Implement client side workflow search/filtering */\n    searchWorkflow: function($el_searchinput, $el_tabletr, min_querylen) {\n        $el_searchinput.on(\"keyup\", function() {\n            const query = $(this).val();\n            // Filter when query is at least 3 characters\n            // otherwise show all rows\n            if (query.length >= min_querylen) {\n                // Ignore the query's case using 'i'\n                const regular_expression = new RegExp(query, \"i\");\n                $el_tabletr.hide();\n                $el_tabletr\n                    .filter(function() {\n                        // Apply regular expression on each row's text\n                        // and show when there is a match\n                        return regular_expression.test($(this).text());\n                    })\n                    .show();\n            } else {\n                $el_tabletr.show();\n            }\n        });\n    },\n\n    /** Ajust the position of dropdown with respect to table */\n    adjustActiondropdown: function() {\n        $(this.el).on(\"show.bs.dropdown\", function() {\n            $(this.el).css(\"overflow\", \"inherit\");\n        });\n        $(this.el).on(\"hide.bs.dropdown\", function() {\n            $(this.el).css(\"overflow\", \"auto\");\n        });\n    },\n\n    /** Template for no workflow */\n    _templateNoWorkflow: function() {\n        return '<div class=\"wf-nodata\"> You have no workflows. </div>';\n    },\n\n    /** Template for actions buttons */\n    _templateActionButtons: function() {\n        return `<ul class=\"manage-table-actions\"><li><input class=\"search-wf form-control\" type=\"text\" autocomplete=\"off\" placeholder=\"search for workflow...\"></li><li><a class=\"action-button fa fa-plus wf-action\" id=\"new-workflow\" title=\"Create new workflow\" href=\"${\n            Galaxy.root\n        }workflows/create\"></a></li><li><a class=\"action-button fa fa-upload wf-action\" id=\"import-workflow\" title=\"Upload or import workflow\" href=\"${\n            Galaxy.root\n        }workflows/import_workflow\"></a></li></ul>`;\n    },\n\n    /** Template for workflow table */\n    _templateWorkflowTable: function() {\n        const tableHtml =\n            '<table class=\"table colored\"><thead>' +\n            '<tr class=\"header\">' +\n            \"<th>Name</th>\" +\n            \"<th>Tags</th>\" +\n            \"<th>Owner</th>\" +\n            \"<th># of Steps</th>\" +\n            \"<th>Published</th>\" +\n            \"<th>Show in tools panel</th>\" +\n            \"</tr></thead>\";\n        return `${tableHtml}<tbody class=\"workflow-search \"><div class=\"hidden_description_layer\"><p>Drop workflow files here to import</p></tbody></table></div>`;\n    },\n\n    /** Main template */\n    _templateHeader: function() {\n        return (\n            '<div class=\"page-container\">' +\n            '<div class=\"user-workflows wf\">' +\n            '<div class=\"response-message\"></div>' +\n            \"<h2>\" +\n            _l(\"Your workflows\") +\n            \"</h2>\" +\n            \"</div>\" +\n            \"</div>\"\n        );\n    }\n});\n\nconst ImportWorkflowView = Backbone.View.extend({\n    initialize: function() {\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Open page to import workflow */\n    render: function() {\n        $.getJSON(`${Galaxy.root}workflow/upload_import_workflow`, options => {\n            this.$el.empty().append(this._mainTemplate(options));\n        });\n    },\n\n    /** Template for the import workflow page */\n    _mainTemplate: function(options) {\n        return `<div class='toolForm'><div class='toolFormTitle'>Import Galaxy workflow</div><div class='toolFormBody'><form name='import_workflow' id='import_workflow' action='${\n            Galaxy.root\n        }workflow/upload_import_workflow' enctype='multipart/form-data' method='POST'><div class='form-row'><label>Galaxy workflow URL:</label><input type='text' name='url' class='input-url' value='${\n            options.url\n        }' size='40'><div class='toolParamHelp' style='clear: both;'>If the workflow is accessible via a URL, enter the URL above and click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><label>Galaxy workflow file:</label><div class='form-row-input'><input type='file' name='file_data' class='input-file'/></div><div class='toolParamHelp' style='clear: both;'>If the workflow is in a file on your computer, choose it and then click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><input type='submit' class='primary-button wf-import' name='import_button' value='Import'></div></form><hr/><div class='form-row'><label>Import a Galaxy workflow from myExperiment:</label><div class='form-row-input'><a href='${\n            options.myexperiment_target_url\n        }'> Visit myExperiment</a></div><div class='toolParamHelp' style='clear: both;'>Click the link above to visit myExperiment and browse for Galaxy workflows.</div><div style='clear: both'></div></div></div></div>`;\n    }\n});\n\nexport default {\n    View: WorkflowListView,\n    ImportWorkflowView: ImportWorkflowView\n};\n"]}